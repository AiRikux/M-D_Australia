}
fx <- Vectorize(fx)
dx <- 0.1
x <- seq(0, 10, dx)
Fx <- function(x, dx = 0.1) {
cumsum(fx(x)*dx)
}
# y1 <- fx(x)
# y2 <- Fx(x, dx)
# plot(x, y1, col="blue", ylim=c(0,1))
# lines(x, y2, col="green")
plot(fx, 0, 10, col="blue", ylim=c(0,1), ylab="f(x) and F(x)")
plot(Fx,0,8, col="green", add = T)
legend("topleft",c("f(x)","F(x)"),cex=.8,col=c("blue","green"),pch=c(1,2))
fx <- function(x) {
if(x >= 0 && x < 3) {
res <-  0.2;
} else if(x >=3 && x < 5) {
res <- 0.05;
} else if(x >= 5 && x < 6) {
res <-  0.15;
} else if(x >= 7 && x < 10) {
res <-  0.05;
} else {
res <- 0;
}
return(res);
}
fx <- Vectorize(fx)
dx <- 0.1
x <- seq(0, 10, dx)
Fx <- function(x, dx = 0.1) {
cumsum(fx(x)*dx)
}
# y1 <- fx(x)
# y2 <- Fx(x, dx)
# plot(x, y1, col="blue", ylim=c(0,1))
# lines(x, y2, col="green")
plot(fx, 0, 10, col="blue", ylim=c(0,1), ylab="f(x) and F(x)")
plot(Fx,0,10, col="green", add = T)
legend("topleft",c("f(x)","F(x)"),cex=.8,col=c("blue","green"),pch=c(1,2))
fx <- function(x) {
if(x >= 0 && x < 3) {
res <-  0.2;
} else if(x >=3 && x < 5) {
res <- 0.05;
} else if(x >= 5 && x < 6) {
res <-  0.15;
} else if(x >= 7 && x < 10) {
res <-  0.05;
} else {
res <- 0;
}
return(res);
}
fx <- Vectorize(fx)
dx <- 0.1
x <- seq(0, 10, dx)
Fx <- function(x, dx = 0.1) {
cumsum(fx(x)*dx)
}
# y1 <- fx(x)
# y2 <- Fx(x, dx)
# plot(x, y1, col="blue", ylim=c(0,1))
# lines(x, y2, col="green")
plot(fx, 0, 10, col="blue", ylim=c(0,1), ylab="f(x) and F(x)")
plot(1,0,10, col="green", add = T)
fx <- function(x) {
if(x >= 0 && x < 3) {
res <-  0.2;
} else if(x >=3 && x < 5) {
res <- 0.05;
} else if(x >= 5 && x < 6) {
res <-  0.15;
} else if(x >= 7 && x < 10) {
res <-  0.05;
} else {
res <- 0;
}
return(res);
}
fx <- Vectorize(fx)
dx <- 0.1
x <- seq(0, 10, dx)
Fx <- function(x, dx = 0.1) {
cumsum(fx(x)*dx)
}
# y1 <- fx(x)
# y2 <- Fx(x, dx)
# plot(x, y1, col="blue", ylim=c(0,1))
# lines(x, y2, col="green")
plot(fx, 0, 10, col="blue", ylim=c(0,1), ylab="f(x) and F(x)")
plot(Fx,0,10, col="green", add = T)
legend("topleft",c("f(x)","F(x)"),cex=.8,col=c("blue","green"),pch=c(1,2))
fx <- function(x) {
if(x >= 0 && x < 3) {
res <-  0.2;
} else if(x >=3 && x < 5) {
res <- 0.05;
} else if(x >= 5 && x < 6) {
res <-  0.15;
} else if(x >= 7 && x < 10) {
res <-  0.05;
} else {
res <- 0;
}
return(res);
}
fx <- Vectorize(fx)
dx <- 0.1
x <- seq(0, 10, dx)
Fx <- function(x, dx = 0.1) {
cumsum(fx(x)*dx)
}
# y1 <- fx(x)
# y2 <- Fx(x, dx)
# plot(x, y1, col="blue", ylim=c(0,1))
# lines(x, y2, col="green")
plot(fx, 0, 10, col="blue", ylim=c(0,1), ylab="f(x) and F(x)")
args(plot(Fx,0,10, col="green", add = T))
legend("topleft",c("f(x)","F(x)"),cex=.8,col=c("blue","green"),pch=c(1,2))
args(plot.function)
args(plot.function)
source('~/.active-rstudio-document', echo=TRUE)
table(x,y)
x <- c(1,0,0,1)
y <- c(1,1,1,1)
table(x,y)
x <- c(1,0,0,1,0)
y <- c(1,1,1,1,0)
table(x,y)
plot.stat <- function(mean.m, mean.f, std.m, std.f, axis.name, main.name, seed.num = 10, part.m = 5, part.f = 7, dim.x, dim.y){
set.seed(seed.num)
m <- round(rnorm(part.m, mean.m, std.m))
f <- round(rnorm(part.f, mean.f, std.f))
cat("Male", main.name,m, '\n')
cat("Female", main.name, f)
plot(f, rep(0, part.f),
xlim = dim.x, ylim = dim.y, col = "red", main= main.name, ylab=axis.name[2], xlab= axis.name[1])
curve(dnorm(x, mean.f, std.f/sqrt(part.f)),add = TRUE, col= "red")
points(m, rep(0, part.m), col = "blue")
curve(dnorm(x, mean.m, std.m/sqrt(part.m)),add = TRUE, col= "blue")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
}
plot.stat <- function(mean.m, mean.f, std.m, std.f, axis.name, main.name, seed.num = 10, part.m = 5, part.f = 7, dim.x, dim.y){
set.seed(seed.num)
m <- round(rnorm(part.m, mean.m, std.m))
f <- round(rnorm(part.f, mean.f, std.f))
cat("Male", main.name,m, '\n')
cat("Female", main.name, f)
plot(f, rep(0, part.f),
xlim = dim.x, ylim = dim.y, col = "red", main= main.name, ylab=axis.name[2], xlab= axis.name[1])
curve(dnorm(x, mean.f, std.f/sqrt(part.f)),add = TRUE, col= "red")
points(m, rep(0, part.m), col = "blue")
curve(dnorm(x, mean.m, std.m/sqrt(part.m)),add = TRUE, col= "blue")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
}
plot.stat <- function(mean.m, mean.f, std.m, std.f, axis.name, main.name, seed.num = 10, part.m = 5, part.f = 7, dim.x, dim.y){
set.seed(seed.num)
m <- round(rnorm(part.m, mean.m, std.m))
f <- round(rnorm(part.f, mean.f, std.f))
cat("Male", main.name,m, '\n')
cat("Female", main.name, f)
plot(f, rep(0, part.f),
xlim = dim.x, ylim = dim.y, col = "red", main= main.name, ylab=axis.name[2], xlab= axis.name[1])
curve(dnorm(x, mean.f, std.f/sqrt(part.f)),add = TRUE, col= "red")
points(m, rep(0, part.m), col = "blue")
curve(dnorm(x, mean.m, std.m/sqrt(part.m)),add = TRUE, col= "blue")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
}
plot.stat <- function(mean.m, mean.f, std.m, std.f, axis.name, main.name, seed.num = 10, part.m = 5, part.f = 7, dim.x, dim.y){
set.seed(seed.num)
m <- round(rnorm(part.m, mean.m, std.m))
f <- round(rnorm(part.f, mean.f, std.f))
cat("Male", main.name,m, '\n')
cat("Female", main.name, f)
plot(f, rep(0, part.f),
xlim = dim.x, ylim = dim.y, col = "red", main= main.name, ylab=axis.name[2], xlab= axis.name[1])
curve(dnorm(x, mean.f, std.f/sqrt(part.f)),add = TRUE, col= "red")
points(m, rep(0, part.m), col = "blue")
curve(dnorm(x, mean.m, std.m/sqrt(part.m)),add = TRUE, col= "blue")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
}
plot.stat(mean.m = 78, std.m = 14, mean.f = 62, std.f = 12,
axis.name = c("Weight","Density"), main.name ="Weight distribution", dim.x = c(30,110), dim.y = c(0,0.1), seed.num = 5)
plot.stat(mean.m = 178.4, std.m = 6.6, mean.f = 164, std.f = 6.6,
axis.name = c("Height","Density"), main.name ="Height distribution", dim.x = c(140,200), dim.y = c(0,0.06), seed.num = 5)
df <- data.frame(height = c(173,160,161,160,188,170,162,179,165,172,159,190),
weight = c(66,55,56,54,97,60,59,79,64,77,52,102),
job = c("construction", "construction", "police", "announcer", "announcer","announcer", "student", "student", "chef", "student", "police", "student"),
hand = c("R", "R", "L","R", "R", "R", "L","R", "L","R", "R", "R"),
gender = c(1, 0, 0, 0, 1, 1, 0, 1,0, 0, 0, 1)
)
# Variance
sqrt(var(df$weight)*11/12)
# Mean
mean(df$weight)
# Plot for slides:
plot(df[df$gender == 1, "weight"], rep(0, 5),
xlim = c(20, 116), ylim = c(0,0.03), col = "blue", main= "Weight Distribution", ylab="Density", xlab= "Weight")
points(df[df$gender == 0, "weight"], rep(0, 7), col = "red")
curve(dnorm(x, 68, 16),add = TRUE, col= "Black")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
# Shading Area
from.z <- 20
to.z <- 36
S.x  <- c(from.z, seq(from.z, to.z, 0.01), to.z)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01), mean = 68,sd = 16), 0)
polygon(S.x,S.y, col="red")
from.z <- 100
to.z <- 116
# Pick sample to estimate for population parameter
set.seed(10)
first.Sample <- df[sample(nrow(df), 5),]
second.Sample <- df[sample(nrow(df), 5),]
third.Sample <- df[sample(nrow(df), 5),]
# CLT
sam_mean<- replicate(500000,mean(df[sample(nrow(df), 5), "weight"]))
# Caluclate the mean of those sample (0.5 Mark)
mean_of_sam_mean<- mean(sam_mean)
# Calculate the variance for those sample (0.5 Mark)
var_of_sam_mean<- var(sam_mean)
# This is the histogram for the sampling process (1 Mark)
hist(sam_mean,prob=T,col='grey',breaks = 20, border="white",xlab = 'Sample Mean')
# This is the theoretical curve for the sampling distribution (1 Mark)
curve(dnorm(x,mean=68,sd= 16/sqrt(5)),add=T,col='red')
# Hypothesis testing
plot(x = seq(1,12), y = df$weight, ylim = c(20,116), ylab = "weight", xlab = "observation", xlim = c(0,13))
se = 1.96*sqrt(var(df$weight)/nrow(df))
abline(h = 68, lty = 1, col = "blue")
abline(h = 68 + se, lty = 2, col = "red")
abline(h = 68 - se, lty = 2, col = "red")
legend("bottomleft", legend=c("Hypothesis", "Boundary"),
col=c("blue", "red"),lty=c(1,2), cex=0.8)
# Linear regression model
plot(df$height,df$weight,col = ifelse(df$gender == 0,'red','blue'),  ylab = "weight", xlab = "height",
main = "Linear Model between Height and Weight")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
abline(lm(weight ~ height,df), col = "black")
# Classification model
model.c <- glm(formula = gender ~ weight, family = binomial, data = df)
summary(model.c)
xweight <- seq(0, 136, 0.01)
yweight <- predict(model.c, list(weight = xweight),type="response")
plot(df$weight, df$gender, pch = 16, xlab = "WEIGHT (kg)", ylab = "Gender", xlim = c(36,104),
main = "Logistic Model predicting Gender using Weight as the predictor")
lines(xweight, yweight)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
abline(v = 70.17, col ="grey")
# Decision Tree
library("rpart")
tree.gender <- rpart(gender ~ weight + height + hand, df, method = "class", control = rpart.control(minsplit = 1, cp = 0))
tree.gender
plot(tree.gender, margin=0.2)
text(tree.gender,digits=3)
library(rpart.plot)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(5)
curve(dnorm(x,5,5))
curve(dnorm(x,5,2))
curve(dnorm(x,1,2))
curve(dnorm(x,0.5,2))
dnorm(1,2,3)
dnorm(c(0,0),2,3)
sort(c(201 ,46 ,06 ,65 ,25 ,97 ,79 ,55 ,77 ,96 ,45 ,66))
sort(c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66))
length(c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66))
mean(c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66))
plot(cb)
cb <- read.csv("chol_bmieg.csv")
cb <- read.csv("chol_bmieg.csv")
cb
summary(cb)
summary(cb[3:5])
str(cb[,c("age",'hgt','wgt')])
colnames(cb)
colnames(cb)[3] <- "Age"
colnames(cb)
summary(cb[cb$Sex == "female", c('Age',"hgt", "wgt")])
summary(cb[cb$Sex == "male", c('Age',"hgt", "wgt")])
summary(iris)
summary(iris)
quantile(iris$Sepal.Width, 0.05)
quantile(iris$Sepal.Width, 0.25)
quantile(iris$Sepal.Width, 0.5)
quantile(iris$Sepal.Width, 0.75)
quantile(iris$Sepal.Width, 0.95)
boxplot(iris$Sepal.Width ~ iris$Species)
?hist
plot(cb)
mr <- read.csv("Mushroom.csv")
corr(cb)
cor(cb)
str(cb)
cor(cb$bmi,cb$totchol)
plot(iris)
str(iris)
cor(iris[1:4])
pair(iris)
pairs(iris)
curve(iris)
curve(iris[1:4])
density(iris[1:4])
library(psych)
pairs.panels(iris[1:4])
##  hide solutions, also set param P=B above
#knitr::opts_chunk$set(echo = F, warning=F, results = "hide", fig.show = 'hide',dev = 'pdf',tidy.opts=list(width.cutoff=80),tidy=TRUE)
#knitr::opts_chunk$set(echo =T, warning=F, dev = 'pdf', tidy.opts=list(width.cutoff=80),tidy=TRUE)
##  display solutions, also set param P=A above
knitr::opts_chunk$set(echo =T,tidy=TRUE)
#add library
#install.packages("ggplot2")
library(ggplot2)
#syntngrams.final
library(psych)
chol_bmieg <- read.csv("chol_bmieg.csv")
View(chol_bmieg)
str(chol_bmieg)
str(chol_bmieg[,c("age","hgt","wgt")])
# This line demonstrates a very important aspect of R, as it shows you how to access
# particular columns (variables) of your dataset. You can use as many variable names
# in quotes inside the c() function (called the "combine" function) to access as many
# of the variables as you like. If you omit the c() function, then all data columns will
# be selected, e.g., str(chol_bmieg[,]) is the same as str(chol_bmieg). Try them both to confirm.
names( chol_bmieg )
names( chol_bmieg )[3] <- "Age"
names( chol_bmieg )
summary( chol_bmieg[chol_bmieg$Sex == "male" ,c("Age","hgt","wgt")] )
summary( chol_bmieg[chol_bmieg$Sex == "female", c("Age","hgt","wgt")] )
# We do this by putting a logical expression in place of the rows to use. This will then
# select those rows for which the logical expression is true from the specified columns.
# An important thing to note is that the summary(), table() and str() functions we have
# used are just one way of summarising and dealing with the data. There are a large number
# of extra R packages available that provide a whole range of extra functionality and
# alternatives to these built-in functions. This is one of the strengths of R - for almost
# any task you can think of, there are likely two or more packages out there that offer
# alternative ways to approach the task. We will deal with extra packages in later
# practical sessions.
describe(iris[1:4])
quantile(iris$Sepal.Width)
boxplot(iris$Sepal.Width~iris$Species)
#store quantiles
setosa<-quantile(iris[iris$Species =="setosa",]$Sepal.Width)
#Calculate upper and lower bound
setosa["upper"]=setosa[4]+1.5*(setosa[4]-setosa[2])
setosa["lower"]=setosa[2]-1.5*(setosa[4]-setosa[2])
setosa
# Generally it shouldn't be removed, as it is a legit data point and not very extreme.
plot(iris[1:4])
cor(iris[1:4])
par(mfrow = c(2, 2))
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# The distributions of sepal length and width are close to unimodal distribution.
# The distributions petal length and width are close to bimodal distribution
# However the distributions will be approximately normal given a species
ggplot (iris, aes (x = Sepal.Length, y = Sepal.Width, fill = Species)) +
stat_binhex (bins=5, aes (alpha = ..count..)) + facet_grid (. ~ Species)
ggplot (iris, aes (x = Petal.Length , y = Petal.Width, fill = Species)) +
stat_binhex (bins=5, aes (alpha = ..count..)) + facet_grid (. ~ Species)
# source: https://stats.stackexchange.com/questions/30788/
#            whats-a-good-way-to-use-r-to-make-a-scatterplot-that-separates-the-data-by-trea
mush <- read.csv("Mushroom.csv")
tab <- table(mush$cap.shape)
pie(tab, main="Cap Shape" )
table(mush$class, mush$cap.shape)
table(mush$class, mush$cap.surface)
table(mush$class, mush$cap.color)
table(mush$class, mush$odor)
table(mush$class, mush$population)
table(mush$class, mush$habitat)
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
if(params$P != "A")
cat("\\iffalse")
if(params$P != "A")
cat("\\fi")
summary(c(27, 12, 18, 5, 23, 9, 3, 16, 20))
boxplot(c(27, 12, 18, 5, 23, 9, 3, 16, 20))
str(iris)
summary(iris)
table(mush$class, mush$cap.shape)
table(mush$class, mush$cap.surface)
table(mush$class, mush$cap.color)
table(mush$class, mush$odor)
table(mush$class, mush$population)
table(mush$class, mush$habitat)
library(TSA)
install.packages("TSA")
library(TSA)
library(urca)
install.packages("urca")
library(TSA)
library(urca)
library(readr)
library(forecast)
install.packages("forecast")
library(TSA)
library(urca)
library(readr)
library(forecast)
library(x12)
install.packages("x12")
library(TSA)
library(urca)
library(readr)
library(forecast)
library(x12)
library(dLagM)
install.packages("dLagM")
library(TSA)
library(urca)
library(readr)
library(forecast)
library(x12)
library(dLagM)
library(tseries)
install.packages("tseries")
install.packages("tseries")
library(TSA)
library(urca)
library(readr)
library(forecast)
library(x12)
library(dLagM)
library(tseries)
library(x12)
# Plot for slides:
plot(df[df$gender == 1, "weight"], rep(0, 5),
xlim = c(20, 116), ylim = c(0,0.03), col = "blue", main= "Weight Distribution", ylab="Density", xlab= "Weight")
points(df[df$gender == 0, "weight"], rep(0, 7), col = "red")
curve(dnorm(x, 68, 16),add = TRUE, col= "Black")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
legend("topleft", legend=c("Female", "Male"),
col=c("red", "blue"),lty=1, cex=0.8)
# Shading Area
from.z <- 20
to.z <- 36
S.x  <- c(from.z, seq(from.z, to.z, 0.01), to.z)
S.y  <- c(0, dnorm(seq(from.z, to.z, 0.01), mean = 68,sd = 16), 0)
polygon(S.x,S.y, col="red")
sum(x-69.25)
x <- c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66)
x <- c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66)
x <- c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66)
sum(x-69.25)
x <- [102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66]
x <- list(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66)
sum(x-69.25)
(x-69.25)
x-69.25
x <- c(102 ,64 ,60 ,56 ,52 ,79 ,97 ,55 ,77 ,69 ,54 ,66)
x-69.25
sum(x-69.25)
(x-69.25)
sum((x-69.25)^2)
sum((x-69.25)^2)/11
sum((x-69.25)^2)
sum((x-69.25)^2)/11
x <- 24
x
x <- 24
x
sp <- read.csv("Data/SP500.csv")
sp
sp$period <- 0
sp[0:58,]$period <- 1
sp[59:108,]$period <- 2
shiny::runApp('Desktop/GitHub/M_D_Australia/App')
